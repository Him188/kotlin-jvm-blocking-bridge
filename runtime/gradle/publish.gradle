// 部分源码来自 kotlinx.coroutines
// Source code from kotlinx.coroutines

def vcs = "https://github.com/mamoe/kotlin-jvm-blocking-bridge"

def pomConfig = {
    licenses {
        license {
            name "Apache-2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "him188"
            name "Him188"
            email "him188@mamoe.net"
        }
    }
    scm {
        url vcs
        connection "scm:${vcs}.git"
        developerConnection "scm:${vcs.replace("https:", "git:")}.git"
    }
}

/*
bintray {
    try {
        user = file("../bintray.user.txt").text
        key = file("../bintray.key.txt").text
    } catch (Exception ignored) {
    }
    version = project.version

    pkg {
        repo = 'jcekt'
        name = "jcekt"
        licenses = ['Apache-2.0']
        vcsUrl = vcs
    }
}*/

project.ext.configureMavenCentralMetadata = { pom ->
    def root = asNode()
    root.appendNode('name', project.name)
    root.appendNode('description', project.description)
    root.appendNode('url', vcs)
    root.children().last() + pomConfig
}

try {

// empty xxx-javadoc.jar
    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
    }
    task stubJavadoc(type: Jar) {
        archiveClassifier = 'javadoc'
    }


} catch (Exception ignored) {

}

/**
 * Publish the platform JAR and POM so that consumers who depend on this module and can't read Gradle module
 * metadata can still get the platform artifact and transitive dependencies from the POM
 * (see details in https://youtrack.jetbrains.com/issue/KT-39184#focus=streamItem-27-4115233.0-0)
 */
project.ext.publishPlatformArtifactsInRootModule = { platformPublication ->
    afterEvaluate {
        def platformPomBuilder = null

        platformPublication.pom.withXml { platformPomBuilder = asString() }

        publishing.publications.kotlinMultiplatform {
            platformPublication.artifacts.forEach {
                artifact(it)
            }

            pom.withXml {
                def pomStringBuilder = asString()
                pomStringBuilder.setLength(0)
                // The platform POM needs its artifact ID replaced with the artifact ID of the root module:
                def platformPomString = platformPomBuilder.toString()
                platformPomString.eachLine { line ->
                    if (!line.contains("<!--")) { // Remove the Gradle module metadata marker as it will be added anew
                        pomStringBuilder.append(line.replace(platformPublication.artifactId, artifactId))
                        pomStringBuilder.append("\n")
                    }
                }
            }
        }

        tasks.matching { it.name == "generatePomFileForKotlinMultiplatformPublication" }.configureEach {
            dependsOn(tasks["generatePomFileFor${platformPublication.name.capitalize()}Publication"])
        }
    }
}

def isKotlin137x = false

afterEvaluate {

    publishing {
        def variantName = project.ext.get("publication.name")

        // Rename artifacts for backward compatibility
        publications.all {
            def type = it.name
            logger.info("Configuring $type")
            switch (type) {
                case 'kotlinMultiplatform':
                    if (isKotlin137x) {
                        it.artifactId = "$variantName-native"
                        it.artifact sourcesJar
                    } else {
                        // With Kotlin 1.4.0, the root module ID has no suffix, but for compatibility with
                        // the consumers who can't read Gradle module metadata, we publish the JVM artifacts in it
                        it.artifactId = variantName
                        // publishPlatformArtifactsInRootModule(publications["jvm"])
                    }
                    break

                case 'metadata':
                    it.artifactId = isKotlin137x ? "$variantName-common" : "$variantName-metadata"
                    break

                case 'jvm':
                    it.artifactId = isKotlin137x ? "$variantName" : "$variantName-jvm"
                    break

                case 'js':
                    it.artifactId = "$variantName-$type"
                    break
            }
            logger.info("Artifact id = ${it.artifactId}")

            pom.withXml(configureMavenCentralMetadata)

            // The 'root' module publishes the JVM module's Javadoc JAR as per publishPlatformArtifactsInRootModule, and

            if (name != "kotlinMultiplatform")
                artifact stubJavadoc
        }

        if (isKotlin137x) {
            disableMetadataPublication()
        }
    }
}

publishing {
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"

            credentials {
                username = System.getenv("SONATYPE_USER")
                password = System.getenv("SONATYPE_KEY")
            }
        }
    }
}

/*
task bintrayUpload(dependsOn: publish)

// This is required for K/N publishing
bintrayUpload.dependsOn publishToMavenLocal


bintrayUpload.dependsOn generatePomFileForKotlinMultiplatformPublication
 */